version: '3.8'

services:
  studio:
    image: ${STUDIO_IMAGE:-supabase/studio}:${STUDIO_TAG:-20240729-ce42139}
    restart: unless-stopped
    environment:
      - STUDIO_PG_META_URL=${STUDIO_PG_META_URL:-http://meta:8080}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}
      - DEFAULT_ORGANIZATION_NAME=${STUDIO_DEFAULT_ORGANIZATION:-your-org-name}
      - DEFAULT_PROJECT_NAME=${STUDIO_DEFAULT_PROJECT:-your-project-name}
      - SUPABASE_URL=${SUPABASE_URL:-http://kong:8000}
      - SUPABASE_PUBLIC_URL=${SUPABASE_PUBLIC_URL:-http://localhost:8000}
      - SUPABASE_ANON_KEY=${ANON_KEY:-your-anon-key}
      - SUPABASE_SERVICE_KEY=${SERVICE_ROLE_KEY:-your-service-role-key}
      - AUTH_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - LOGFLARE_API_KEY=${LOGFLARE_API_KEY:-your-logflare-api-key}
      - LOGFLARE_URL=${LOGFLARE_URL:-http://analytics:4000}
      - NEXT_PUBLIC_ENABLE_LOGS=${NEXT_PUBLIC_ENABLE_LOGS:-true}
      - NEXT_ANALYTICS_BACKEND_PROVIDER=${NEXT_ANALYTICS_BACKEND_PROVIDER:-postgres}
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/profile', (r) => {if (r.statusCode !== 200) throw new Error(r.statusCode)})"]
      interval: 5s
      timeout: 5s
      retries: 3
    ports:
      - "${STUDIO_PORT:-3434}:3000"

  kong:
    image: ${KONG_IMAGE:-kong}:${KONG_TAG:-2.8.1}
    restart: unless-stopped
    environment:
      - KONG_DATABASE=${KONG_DATABASE:-off}
      - KONG_DECLARATIVE_CONFIG=${KONG_DECLARATIVE_CONFIG:-/home/kong/kong.yml}
      - KONG_DNS_ORDER=${KONG_DNS_ORDER:-LAST,A,CNAME}
      - KONG_PLUGINS=${KONG_PLUGINS:-request-transformer,cors,key-auth,acl,basic-auth}
      - SUPABASE_ANON_KEY=${ANON_KEY:-your-anon-key}
      - SUPABASE_SERVICE_KEY=${SERVICE_ROLE_KEY:-your-service-role-key}
      - DASHBOARD_USERNAME=${DASHBOARD_USERNAME:-your-dashboard-username}
      - DASHBOARD_PASSWORD=${DASHBOARD_PASSWORD:-your-dashboard-password}
    ports:
      - "${KONG_HTTP_PORT:-8434}:8000"
      - "${KONG_HTTPS_PORT:-8435}:8443"
    volumes:
      - ${KONG_DECLARATIVE_CONFIG_PATH:-./volumes/api/kong.yml}:/home/kong/kong.yml:ro

  auth:
    image: ${AUTH_IMAGE:-supabase/gotrue}:${AUTH_TAG:-v2.158.1}
    restart: unless-stopped
    environment:
      - GOTRUE_API_HOST=${GOTRUE_API_HOST:-0.0.0.0}
      - GOTRUE_API_PORT=${GOTRUE_API_PORT:-9999}
      - API_EXTERNAL_URL=${API_EXTERNAL_URL:-http://localhost:8000}
      - GOTRUE_DB_DRIVER=${GOTRUE_DB_DRIVER:-postgres}
      - GOTRUE_DB_DATABASE_URL=postgres://supabase_auth_admin:${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}@${POSTGRES_HOST:-db}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-postgres}
      - GOTRUE_SITE_URL=${SITE_URL:-http://localhost:3000}
      - GOTRUE_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - GOTRUE_JWT_EXP=${JWT_EXPIRY:-3600}
      - GOTRUE_DISABLE_SIGNUP=${DISABLE_SIGNUP:-false}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9999/health"]
      interval: 5s
      timeout: 5s
      retries: 3
    ports:
      - "${AUTH_PORT:-9999}:9999"

  rest:
    image: ${REST_IMAGE:-postgrest/postgrest}:${REST_TAG:-v12.2.0}
    restart: unless-stopped
    environment:
      - PGRST_DB_URI=postgres://authenticator:${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}@${POSTGRES_HOST:-db}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-postgres}
      - PGRST_DB_SCHEMAS=${PGRST_DB_SCHEMAS:-public,storage,graphql_public}
      - PGRST_DB_ANON_ROLE=${PGRST_DB_ANON_ROLE:-anon}
      - PGRST_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - PGRST_DB_USE_LEGACY_GUCS=${PGRST_DB_USE_LEGACY_GUCS:-false}
    command: "postgrest"
    ports:
      - "${REST_PORT:-3435}:3000"

  realtime:
    image: ${REALTIME_IMAGE:-supabase/realtime}:${REALTIME_TAG:-v2.30.23}
    restart: unless-stopped
    environment:
      - PORT=${REALTIME_PORT:-4000}
      - DB_HOST=${POSTGRES_HOST:-db}
      - DB_PORT=${POSTGRES_PORT:-5432}
      - DB_USER=${POSTGRES_USER:-supabase_admin}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}
      - DB_NAME=${POSTGRES_DB:-postgres}
      - DB_AFTER_CONNECT_QUERY=${DB_AFTER_CONNECT_QUERY:-SET search_path TO _realtime}
      - SECRET_KEY_BASE=${REALTIME_SECRET_KEY_BASE:-UpNVntn3cDxHJpq99YMc1T1AQgQpc8kfYTuRgBiYa15BLrx8etQoXz3gZv1/u2oq}
      - API_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - RLIMIT_NOFILE=${REALTIME_RLIMIT_NOFILE:-10000}
    healthcheck:
      test: ["CMD", "curl", "-sSfL", "--head", "-o", "/dev/null", "-H", "Authorization: Bearer ${ANON_KEY}", "http://localhost:4000/api/tenants/realtime-dev/health"]
      interval: 5s
      timeout: 5s
      retries: 3
    ports:
      - "${REALTIME_PORT:-4000}:4000"

  storage:
    image: ${STORAGE_IMAGE:-supabase/storage-api}:${STORAGE_TAG:-v1.0.6}
    restart: unless-stopped
    environment:
      - ANON_KEY=${ANON_KEY:-your-anon-key}
      - SERVICE_KEY=${SERVICE_ROLE_KEY:-your-service-role-key}
      - POSTGREST_URL=${POSTGREST_URL:-http://rest:3000}
      - PGRST_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - DATABASE_URL=postgres://supabase_storage_admin:${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}@${POSTGRES_HOST:-db}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-postgres}
      - FILE_SIZE_LIMIT=${FILE_SIZE_LIMIT:-52428800}
      - STORAGE_BACKEND=${STORAGE_BACKEND:-file}
      - FILE_STORAGE_BACKEND_PATH=${FILE_STORAGE_BACKEND_PATH:-/var/lib/storage}
    volumes:
      - ${STORAGE_VOLUME_PATH:-./volumes/storage}:/var/lib/storage:z
    ports:
      - "${STORAGE_PORT:-5000}:5000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/status"]
      interval: 5s
      timeout: 5s
      retries: 3

  meta:
    image: ${META_IMAGE:-supabase/postgres-meta}:${META_TAG:-v0.83.2}
    restart: unless-stopped
    environment:
      - PG_META_PORT=${META_PORT:-8080}
      - PG_META_DB_HOST=${POSTGRES_HOST:-db}
      - PG_META_DB_PORT=${POSTGRES_PORT:-5432}
      - PG_META_DB_NAME=${POSTGRES_DB:-postgres}
      - PG_META_DB_USER=${POSTGRES_USER:-supabase_admin}
      - PG_META_DB_PASSWORD=${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}
    ports:
      - "${META_PORT:-8436}:8080"

  functions:
    image: ${FUNCTIONS_IMAGE:-supabase/edge-runtime}:${FUNCTIONS_TAG:-v1.56.0}
    restart: unless-stopped
    environment:
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - SUPABASE_URL=${SUPABASE_URL:-http://kong:8000}
      - SUPABASE_ANON_KEY=${ANON_KEY:-your-anon-key}
      - SUPABASE_SERVICE_ROLE_KEY=${SERVICE_ROLE_KEY:-your-service-role-key}
      - SUPABASE_DB_URL=postgresql://postgres:${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}@${POSTGRES_HOST:-db}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-postgres}
      - VERIFY_JWT=${FUNCTIONS_VERIFY_JWT:-false}
    volumes:
      - ${FUNCTIONS_VOLUME_PATH:-./volumes/functions}:/home/deno/functions:Z
    command:
      - start
      - --main-service
      - /home/deno/functions/main

  analytics:
    image: ${ANALYTICS_IMAGE:-supabase/logflare}:${ANALYTICS_TAG:-1.4.0}
    restart: unless-stopped
    environment:
      - LOGFLARE_NODE_HOST=${LOGFLARE_NODE_HOST:-127.0.0.1}
      - DB_USERNAME=${POSTGRES_USER:-supabase_admin}
      - DB_DATABASE=${POSTGRES_DB:-postgres}
      - DB_HOSTNAME=${POSTGRES_HOST:-db}
      - DB_PORT=${POSTGRES_PORT:-5432}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}
      - DB_SCHEMA=${ANALYTICS_DB_SCHEMA:-_analytics}
      - LOGFLARE_API_KEY=${LOGFLARE_API_KEY:-your-logflare-api-key}
      - LOGFLARE_SINGLE_TENANT=${LOGFLARE_SINGLE_TENANT:-true}
      - LOGFLARE_SUPABASE_MODE=${LOGFLARE_SUPABASE_MODE:-true}
      - LOGFLARE_MIN_CLUSTER_SIZE=${LOGFLARE_MIN_CLUSTER_SIZE:-1}
      - POSTGRES_BACKEND_URL=postgresql://${POSTGRES_USER:-supabase_admin}:${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}@${POSTGRES_HOST:-db}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-postgres}
      - POSTGRES_BACKEND_SCHEMA=${ANALYTICS_DB_SCHEMA:-_analytics}
      - LOGFLARE_FEATURE_FLAG_OVERRIDE=${LOGFLARE_FEATURE_FLAG_OVERRIDE:-multibackend=true}
    ports:
      - "${ANALYTICS_PORT:-4000}:4000"
    healthcheck:
      test: ["CMD", "curl", "http://localhost:4000/health"]
      interval: 5s
      timeout: 5s
      retries: 10

  db:
    image: ${POSTGRES_IMAGE:-supabase/postgres}:${POSTGRES_TAG:-15.1.1.78}
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-your-super-secret-and-long-postgres-password}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - JWT_EXP=${JWT_EXPIRY:-3600}
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - ${DB_VOLUME_PATH:-./volumes/db/data}:/var/lib/postgresql/data:Z
      - ${DB_INIT_VOLUME_PATH:-./volumes/db}:/docker-entrypoint-initdb.d:Z
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 10

  vector:
    image: ${VECTOR_IMAGE:-timberio/vector}:${VECTOR_TAG:-0.28.1-alpine}
    restart: unless-stopped
    volumes:
      - ${VECTOR_CONFIG_PATH:-./volumes/logs/vector.yml}:/etc/vector/vector.yml:ro
      - ${DOCKER_SOCKET_LOCATION:-/var/run/docker.sock}:/var/run/docker.sock:ro
    environment:
      - LOGFLARE_API_KEY=${LOGFLARE_API_KEY:-your-logflare-api-key}
    command: ["--config", "etc/vector/vector.yml"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://vector:9001/health"]
      interval: 5s
      timeout: 5s
      retries: 3

volumes:
  db_data:
  storage_data:
  functions_data:
